{
  "about": {
    "name": "Preetham Mukundan",
    "role": "Game Developer",
    "bio": "Award-winning game developer with 10 years of experience in Unreal Engine and 2 years of industry experience. Proficient in gameplay systems, AI development, and network programming. Recognized for excellence in programming and game development at Vancouver Film School.",
    "email": "rpm869@gmail.com",
    "phone": "+1 672 272 8355",
    "linkedin": "https://www.linkedin.com/in/preetham-mukundan-012950255/",
    "github": "https://github.com/PreethamMukundan",
    "resume": "/assets/resume.pdf",
    "image": "/assets/images/Profile/PP.jpg"
  },
  "projects": [
    {
      "id": "spraynpray",
      "title": "Spray N Pray",
      "shortDescription": "Spray N' Pray is a fast-paced boomer shooter where you play as Justinian, a priest armed with dual revolvers. Dash, run, and jump through a demon-infested cathedral, vanquishing hellspawn and fallen angels to earn your righteous place in heaven.",
      "thumbnail": "/assets/images/SprayNPray/spray-thumb.png",
      "video": "/assets/videos/SprayNPray/SprayNPrayTrailer.mp4",
      "mechanics": [
        {
          "id": "ai-systems",
          "title": "Advanced AI Systems",
          "description": "On Spray N Pray, I programmed an AI system featuring five unique enemy classes, each built to support varied combat scenarios and encourage strategic player movement.\n\nEnemy Types\n\nGrunt: Slow melee unit that closes distance and performs a heavy attack with long recovery.\n\nSoldier: Ranged enemy that predicts player velocity for more accurate projectile attacks; swaps to melee up close.\n\nTank: Durable frontline. Uses lunge attacks to rapidly close distance and applies constant offensive pressure.\n\nFlyer: Aerial enemy with ranged attacks, adding verticality to gameplay.\n\nBomber: Charges the player and detonates on contact, disrupting positioning.\n\nTechnical Breakdown\n\nTo implement these behaviors, I:\n\nBuilt EQS queries to drive enemy positioning and attack distance logic.\n\nCreated a base enemy character + AI controller, which defines foundational behaviors including:\nDeath handling\nStun state machine\n\nDeveloped individual behavior trees tailored to each enemy class to define how they evaluate threats, reposition, and select attacks.\n\nThis setup provided a scalable and reusable foundation, allowing each enemy type to behave distinctly while sharing core functionality.\n\nUltimately, watching players instantly understand and react differently to each enemy type was a highlight of the development processâ€”and one of the most fun parts of the project to work on.",
          "media": [
            "/assets/videos/SprayNPray/enemyBehaviour.mp4"
          ]
        },
        {
          "id": "custom-movement",
          "title": "Handling flying enemies in UE5",
          "description": "While working on enemy AI in Spray N Pray, I hit a limitation with Unreal's EQS: it only generates points on the NavMesh â€” great for ground AI, but not for flying characters. So I created a custom 3D EQS generator to solve the problem.\n\nðŸ”§ What I built:\n\nA cube-shaped EQS generator that spawns points in 3D space around the flying enemy\n\nPoints are scored by distance to the player (closer = better)\n\nPoints are filtered out if:\n\nThey don't have a clear line of sight\n\nThey're too close to or overlapping with obstacles\n\nThe flying enemy moves to the best-scoring point\n\nThis process loops until it's close enough to the player\n\nThe core logic was implemented in C++, and the behavior is managed using Blueprint Behavior Trees â€” a flexible and powerful combo.",
          "media": [
            "/assets/videos/SprayNPray/FlyingEnemyPathFinding.mp4"
          ]
        },
        {
          "id": "spawn-system",
          "title": "Spawn System",
          "description": "I implemented a robust spawning and wave-management system that controlled how enemies entered the battlefield while supporting designer customization and playstyle variability.\n\nCore Functionality\nDynamic Spawning Prototype\n\nSubsystem triggered spawns based on an input enemy list\n\nEnemy types used EQS queries to find ideal spawn locations\n\nAllowed quick iteration but produced overly random pacing\n\nHand-Placed Spawn System\n\nTo ensure curated encounters, we transitioned to designer-placed spawn points:\n\nGuaranteed consistent combat flow\n\nAllowed specific control of pressure & movement\n\nMade encounters easier to tune\n\nThis eliminated randomness and encouraged intentional room-by-room design.\n\nWave Logic Evolution\n\nNext wave spawns when all enemies are defeated\n\nAdded a variable to define the minimum number of enemies remaining before triggering the next wave\nâ†’ Allowed smarter pacing during fast-kill scenarios\n\nIf a wave has a mini-boss, the next wave will only begin after it dies, regardless of other enemies\nâ†’ Supports set-piece encounters\n\nDifficulty Scaling\n\nTo support replayability and challenge levels, I extended the system with difficulty-driven spawning:\n\nHigher difficulties (Hard / Insane) pulled from different enemy spawn lists\n\nIncreased total enemy count per wave\n\nAdjusted wave makeup to add tougher or additional units\n\nThis allowed difficulty to scale without requiring designers to modify level data.\n\nPolish\n\nAdded Niagara particle VFX on enemy spawn to improve visual clarity & anticipation\n\nResult\n\nThis system empowered designers to craft intentional combat scenarios, supported scalable difficulty, and maintained modularity through data-driven enemy lists. The end result was an encounter system that felt challenging, dynamic, and adaptable.",
          "media": [
            "/assets/videos/SprayNPray/Spawnsystem.mp4"
          ]
        }
      ]
    },
    {
      "id": "zerolock",
      "title": "Zerolock",
      "shortDescription": "Zerolock is a hero-based, multiplayer third-person shooter inspired by Valve's Deadlock. The project is built in Unreal Engine with a strong focus on responsive online gameplay using the Gameplay Ability System (GAS) and Unreal's networking framework.",
      "thumbnail": "/assets/images/ZeroLock/ZeroLockSlash.png",
      "video": "/assets/videos/movement-system-demo.mp4",
      "mechanics": [
        {
          "id": "movement-system",
          "title": "Advanced Movement System",
          "description": "Recreating Advanced Player Movement from Deadlock in Unreal Engine 5 (Multiplayer Ready)\nInspired by the fluid and responsive movement mechanics in Deadlock by Valve, I undertook a personal project to replicate a similar system within Unreal Engine 5, implemented entirely in C++ with full multiplayer networking support.\nThe custom movement system includes dash, slide, mantle, wall bounce, and wall run.\n\nThis project allowed me to:\nðŸ”§ Analyze and translate complex movement mechanics into Unreal's framework\nðŸ”§ Implement efficient and responsive network replication for multiplayer gameplay\nðŸ”§ Refine my understanding of character physics, animation blending, and gameplay responsiveness\n\nAll movement features were developed from the ground up to closely match the feel of modern AAA movement systems, while maintaining performance and consistency across networked sessions.",
          "media": [
            "/assets/videos/ZeroLock/ZeroLock_MovementV.mp4"
          ]
        },
        {
          "id": "ability-system",
          "title": "Gameplay Ability System",
          "description": "Implemented networked abilities using the Gameplay Ability System plugin for synchronized player actions across the network.",
          "media": [
            "/assets/videos/ability-system-demo.mp4"
          ]
        }
      ]
    }
  ],
  "games": [
    {
      "id": "spray_download",
      "title": "Spray N Pray (Build)",
      "description": "Playable build of Spray N Pray.",
      "image": "/assets/images/spray-thumb.jpg",
      "download": ""
    }
  ]
  ,
  "experience": [
    {
      "company": "Gamitronics",
      "role": "Gameplay Programmer",
      "dateRange": "JUN 2022 - OCT 2023",
      "description": "Developed a sophisticated Construction Tool enabling players to place, rotate, scale, and modify assets with material changes and light source management. Implemented an Azure-powered speech-to-text system for interactive user responses."
    },
    {
      "company": "FREAK X APPS",
      "role": "Game Development Intern",
      "dateRange": "SEP 2021 - FEB 2022",
      "description": "Prototyped and implemented game mechanisms, optimized code for performance and space efficiency, and conducted thorough testing and debugging of existing game code."
    }
  ],
  "education": [
    {
      "institution": "Vancouver Film School",
      "degree": "Programming For Web, Mobile & Games",
      "dateRange": "JAN 2024 - DEC 2024",
      "description": "Awarded best programmer and best final project (Spray N Pray). Developed multiple console games and worked on team projects including a movement-based FPS game."
    },
    {
      "institution": "VIT University",
      "degree": "Master of Technology in Software Engineering",
      "dateRange": "JUL 2017 - FEB 2022",
      "description": "Mastered multiple programming languages while developing real-world websites, AI models, and applications in team environments."
    },
    {
      "institution": "BCIT",
      "degree": "Advanced Diploma in Business Management",
      "dateRange": "JAN 2025 - AUG 2025",
      "description": "Focused on business management with hands-on projects and created business and marketing plans in diverse team settings."
    }
  ],
  "skills": [
    {
      "category": "Game Engines",
      "items": [
        {
          "name": "Unreal Engine 4/5 (10 years)",
          "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/unrealengine/unrealengine-original.svg"
        },
        {
          "name": "Unity",
          "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/unity/unity-original.svg"
        },
        {
          "name": "Construct 3",
          "icon": "https://www.construct.net/images/v1016/r/global/construct-3-logo.png"
        }
      ]
    },
    {
      "category": "Programming Languages",
      "items": [
        {
          "name": "C++",
          "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/cplusplus/cplusplus-original.svg"
        },
        {
          "name": "Java",
          "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/java/java-original.svg"
        }
      ]
    },
    {
      "category": "Game Systems",
      "items": [
        {
          "name": "EQS (Enemy AI)",
          "icon": "https://img.icons8.com/color/48/artificial-intelligence.png"
        },
        {
          "name": "Gameplay Ability System",
          "icon": "https://img.icons8.com/color/48/game-controller.png"
        },
        {
          "name": "Network Programming",
          "icon": "https://img.icons8.com/color/48/network.png"
        },
        {
          "name": "Steam Subsystem",
          "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/steam/steam-original.svg"
        }
      ]
    },
    {
      "category": "Specializations",
      "items": [
        {
          "name": "Gameplay Programming",
          "icon": "https://img.icons8.com/color/48/source-code.png"
        },
        {
          "name": "AI Systems",
          "icon": "https://img.icons8.com/color/48/brain.png"
        },
        {
          "name": "Network Programming",
          "icon": "https://img.icons8.com/color/48/network.png"
        },
        {
          "name": "Movement Systems",
          "icon": "https://img.icons8.com/color/48/running.png"
        }
      ]
    }
  ]
}